---
title: "Qualification et nettoyage"
description: "Détecter et corriger des erreurs dans les données"
format: html
author: "Félix Marchais"
date: "2025-07-29"
categories:
  - R
  - Data management
  - Qualité
execute: 
  eval: false 
  echo: true
draft: true
---


# Qualification

détecter les erreurs :
méthode manuelle avec fonctions persos, tidyverse et flextable
{validate}
{pointblank}


# Nettoyage

L'une des grandes forces de R est le Tidyverse: un ensemble de packages qui permettent de manipuler les données avec facilité.
- {dplyr} Permet de filtrer et sélectionner les données, et regroupe les grandes fonctions de SQL (SELECT, FILTER, DISTINCT, COUNT, UPDATE/mutate()... )
- {stringr} Manipule des chaînes de texte
- {lubridate} Manipule des dates et périodes de temps
- {tidyr} Aide à créer des données au format *tidy* : "*un individu par ligne, une variable par colonne*"

On peut aussi citer {cleaner}, un excellent package pour nettoyer ses données \n

Ci-dessous, un exemple :

```{r nettoyage_1}
#| echo: false
#| warning: false
#| 
library(readr)
library(dplyr)
library(stringr)
library(cleaner)

messy_df <- read_csv2("../../data/data_nettoyage.csv")



# Etape 1 : nettoyer les ID
## Avoir A-xxx pour chaque patient

clean_df <- messy_df %>%
  mutate(
    patient_id = str_replace_all(patient_id, "(\\d+)", 
                                 str_pad(
                                   str_extract_all(patient_id, "\\d+"),
                                   3, 
                                   side = "left",
                                   pad = "0"
                                 )
    ),
    inclusion_date = clean_Date(inclusion_date, guess_each = TRUE),
    organe = case_when(
      str_detect(organe, regex("poumons?", ignore_case = TRUE)) ~ "poumons",
      TRUE ~ organe
      ),
    CIM10 = toupper(str_remove_all(CIM10, "\\W")),
    mutation_yn = clean_logical(mutation_yn)
  )

  

# ajouter des doublons avec données manquantes

# pour fusionner les doublons ayant une donnée manquante

unique_df <- clean_df %>% 
  group_by(name) %>% 
  summarize_all(~ first(na.omit(.)))



starwars %>% 
  cleaner::format_names(camelCase = TRUE) # pour corriger les noms de colonnes
```

